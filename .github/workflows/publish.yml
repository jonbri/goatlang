name: Publish
on:
  push:
    branches:
      - 'main'
      - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  Tag_And_Publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          registry-url: 'https://registry.npmjs.org'

      - name: Check
        run: |
          yarn install
          yarn build
          yarn test:node
          yarn start:node

      - name: Version info
        run: node ./bin/version.js --pretty

      - name: Determine next version
        id: determine_next_version
        run: |
          NEW_VERSION=`node ./bin/version.js --value="nextVersion"`
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Determine type of release
        id: determine_type_of_release
        if: ${{ (steps.determine_next_version.outputs.NEW_VERSION != 'null') }}
        run: |
          RELEASE_TYPE=`node ./bin/version.js --value="releaseType"`
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Determine publishing dist tag
        id: determine_dist_tag
        env:
          RELEASE_TYPE: ${{ steps.determine_next_version.outputs.RELEASE_TYPE }}
        if: ${{ (steps.determine_next_version.outputs.NEW_VERSION != 'null') }}
        run: |
          DIST_TAG="latest"
          if [[ "$RELEASE_TYPE" == "release" ]]; then
            DIST_TAG="latest"
          elif [[ "$RELEASE_TYPE" == "prerelease" ]]; then
            DIST_TAG="beta"
          else [[ "$RELEASE_TYPE" == "maintenance" ]]; then
            DIST_TAG="maintenance"
          fi
          echo "DIST_TAG=$DIST_TAG" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Update build/package.json
        env:
          NEW_VERSION: ${{ steps.determine_next_version.outputs.NEW_VERSION }}
        if: ${{ steps.determine_next_version.outputs.NEW_VERSION != 'null' }}
        run: |
          cd build
          npm version $NEW_VERSION --commit-hooks false --git-tag-version false
          head package.json
          cd ..

      - name: Create release tag
        env:
          NEW_VERSION: ${{ steps.determine_next_version.outputs.NEW_VERSION }}
        if: ${{ steps.determine_next_version.outputs.NEW_VERSION != 'null' }}
        run: git tag $NEW_VERSION

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          DIST_TAG: ${{ steps.determine_next_version.outputs.DIST_TAG }}
        if: ${{ (steps.determine_next_version.outputs.NEW_VERSION != 'null') }}
        run: npm publish ./build --tag=$DIST_TAG

      - name: Push release tag
        env:
          NEW_VERSION: ${{ steps.determine_next_version.outputs.NEW_VERSION }}
        if: ${{ steps.determine_next_version.outputs.NEW_VERSION != 'null' }}
        run: git push origin $NEW_VERSION
