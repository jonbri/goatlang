name: Publish
on:
  push:
    branches:
      - 'main'
      - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  Tag_And_Publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          registry-url: 'https://registry.npmjs.org'

      - name: Check
        run: |
          yarn install
          yarn build
          yarn test:node
          yarn start:node

      - name: Determine type of release
        id: determine_type_of_release
        run: |
          if [[ `git log -1 --pretty=%B` == release* ]]; then
            RELEASE_TYPE="release"
          elif [[ `git rev-parse --abbrev-ref HEAD` =~ ^[0-9]+[.][0-9]+[.][0-9]+$ ]]; then
            RELEASE_TYPE="maintenance"
          else
            RELEASE_TYPE="prerelease"
          fi

          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Next version logic
        run: node ./bin/nextVersion.js

      - name: Determine next version
        id: determine_next_version
        env:
          RELEASE_TYPE: ${{ steps.determine_type_of_release.outputs.RELEASE_TYPE }}
        run: |
          NEW_VERSION=`node ./bin/nextVersion.js ${RELEASE_TYPE}`
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Update build/package.json
        env:
          NEW_VERSION: ${{ steps.determine_next_version.outputs.NEW_VERSION }}
        run: |
          cd build
          npm version $NEW_VERSION --commit-hooks false --git-tag-version false
          head package.json
          cd ..

      - name: Tag
        env:
          NEW_VERSION: ${{ steps.determine_next_version.outputs.NEW_VERSION }}
        run: |
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Publish release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.determine_type_of_release.outputs.RELEASE_TYPE == 'release' }}
        run: npm publish ./build --tag=latest

      - name: Publish prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.determine_type_of_release.outputs.RELEASE_TYPE == 'prerelease' }}
        run: npm publish ./build --tag=beta

      - name: Publish maintenance release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.determine_type_of_release.outputs.RELEASE_TYPE == 'maintenance' }}
        run: npm publish ./build

